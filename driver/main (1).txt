#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cmath>

#define BRAM_SIZE_ROTATED 7056
#define BRAM_SIZE_UNROTATED 3600

int bram_r_rotated[BRAM_SIZE_ROTATED];
int bram_g_rotated[BRAM_SIZE_ROTATED];
int bram_b_rotated[BRAM_SIZE_ROTATED];

int bram_r_unrotated[BRAM_SIZE_UNROTATED];
int bram_g_unrotated[BRAM_SIZE_UNROTATED];
int bram_b_unrotated[BRAM_SIZE_UNROTATED];
#define MAX_SIZE_LOOKUP 720

 const double sincoslut[MAX_SIZE_LOOKUP] = {//sin
 0.0000000000, 0.0174524064, 0.0348994967, 0.0523359562,
 0.0697564737, 0.0871557427, 0.1045284633, 0.1218693434,
 0.1391731010, 0.1564344650, 0.1736481777, 0.1908089954,
 0.2079116908, 0.2249510543, 0.2419218956, 0.2588190451,
 0.2756373558, 0.2923717047, 0.3090169944, 0.3255681545,
 0.3420201433, 0.3583679495, 0.3746065934, 0.3907311285,
 0.4067366431, 0.4226182617, 0.4383711468, 0.4539904997,
 0.4694715628, 0.4848096202, 0.5000000000, 0.5150380749,
 0.5299192642, 0.5446390350, 0.5591929035, 0.5735764364,
 0.5877852523, 0.6018150232, 0.6156614753, 0.6293203910,
 0.6427876097, 0.6560590290, 0.6691306064, 0.6819983601,
 0.6946583705, 0.7071067812, 0.7193398003, 0.7313537016,
 0.7431448255, 0.7547095802, 0.7660444431, 0.7771459615,
 0.7880107536, 0.7986355100, 0.8090169944, 0.8191520443,
 0.8290375726, 0.8386705679, 0.8480480962, 0.8571673007,
 0.8660254038, 0.8746197071, 0.8829475929, 0.8910065242,
 0.8987940463, 0.9063077870, 0.9135454576, 0.9205048535,
 0.9271838546, 0.9335804265, 0.9396926208, 0.9455185756,
 0.9510565163, 0.9563047560, 0.9612616959, 0.9659258263,
 0.9702957263, 0.9743700648, 0.9781476007, 0.9816271834,
 0.9848077530, 0.9876883406, 0.9902680687, 0.9925461516,
 0.9945218954, 0.9961946981, 0.9975640503, 0.9986295348,
 0.9993908270, 0.9998476952, 1.0000000000, 0.9998476952,
 0.9993908270, 0.9986295348, 0.9975640503, 0.9961946981,
 0.9945218954, 0.9925461516, 0.9902680687, 0.9876883406,
 0.9848077530, 0.9816271834, 0.9781476007, 0.9743700648,
 0.9702957263, 0.9659258263, 0.9612616959, 0.9563047560,
 0.9510565163, 0.9455185756, 0.9396926208, 0.9335804265,
 0.9271838546, 0.9205048535, 0.9135454576, 0.9063077870,
 0.8987940463, 0.8910065242, 0.8829475929, 0.8746197071,
 0.8660254038, 0.8571673007, 0.8480480962, 0.8386705679,
 0.8290375726, 0.8191520443, 0.8090169944, 0.7986355100,
 0.7880107536, 0.7771459615, 0.7660444431, 0.7547095802,
 0.7431448255, 0.7313537016, 0.7193398003, 0.7071067812,
 0.6946583705, 0.6819983601, 0.6691306064, 0.6560590290,
 0.6427876097, 0.6293203910, 0.6156614753, 0.6018150232,
 0.5877852523, 0.5735764364, 0.5591929035, 0.5446390350,
 0.5299192642, 0.5150380749, 0.5000000000, 0.4848096202,
 0.4694715628, 0.4539904997, 0.4383711468, 0.4226182617,
 0.4067366431, 0.3907311285, 0.3746065934, 0.3583679495,
 0.3420201433, 0.3255681545, 0.3090169944, 0.2923717047,
 0.2756373558, 0.2588190451, 0.2419218956, 0.2249510543,
 0.2079116908, 0.1908089954, 0.1736481777, 0.1564344650,
 0.1391731010, 0.1218693434, 0.1045284633, 0.0871557427,
 0.0697564737, 0.0523359562, 0.0348994967, 0.0174524064,
 0.0000000000,-0.0174524064,-0.0348994967,-0.0523359562,
-0.0697564737,-0.0871557427,-0.1045284633,-0.1218693434,
-0.1391731010,-0.1564344650,-0.1736481777,-0.1908089954,
-0.2079116908,-0.2249510543,-0.2419218956,-0.2588190451,
-0.2756373558,-0.2923717047,-0.3090169944,-0.3255681545,
-0.3420201433,-0.3583679495,-0.3746065934,-0.3907311285,
-0.4067366431,-0.4226182617,-0.4383711468,-0.4539904997,
-0.4694715628,-0.4848096202,-0.5000000000,-0.5150380749,
-0.5299192642,-0.5446390350,-0.5591929035,-0.5735764364,
-0.5877852523,-0.6018150232,-0.6156614753,-0.6293203910,
-0.6427876097,-0.6560590290,-0.6691306064,-0.6819983601,
-0.6946583705,-0.7071067812,-0.7193398003,-0.7313537016,
-0.7431448255,-0.7547095802,-0.7660444431,-0.7771459615,
-0.7880107536,-0.7986355100,-0.8090169944,-0.8191520443,
-0.8290375726,-0.8386705679,-0.8480480962,-0.8571673007,
-0.8660254038,-0.8746197071,-0.8829475929,-0.8910065242,
-0.8987940463,-0.9063077870,-0.9135454576,-0.9205048535,
-0.9271838546,-0.9335804265,-0.9396926208,-0.9455185756,
-0.9510565163,-0.9563047560,-0.9612616959,-0.9659258263,
-0.9702957263,-0.9743700648,-0.9781476007,-0.9816271834,
-0.9848077530,-0.9876883406,-0.9902680687,-0.9925461516,
-0.9945218954,-0.9961946981,-0.9975640503,-0.9986295348,
-0.9993908270,-0.9998476952,-1.0000000000,-0.9998476952,
-0.9993908270,-0.9986295348,-0.9975640503,-0.9961946981,
-0.9945218954,-0.9925461516,-0.9902680687,-0.9876883406,
-0.9848077530,-0.9816271834,-0.9781476007,-0.9743700648,
-0.9702957263,-0.9659258263,-0.9612616959,-0.9563047560,
-0.9510565163,-0.9455185756,-0.9396926208,-0.9335804265,
-0.9271838546,-0.9205048535,-0.9135454576,-0.9063077870,
-0.8987940463,-0.8910065242,-0.8829475929,-0.8746197071,
-0.8660254038,-0.8571673007,-0.8480480962,-0.8386705679,
-0.8290375726,-0.8191520443,-0.8090169944,-0.7986355100,
-0.7880107536,-0.7771459615,-0.7660444431,-0.7547095802,
-0.7431448255,-0.7313537016,-0.7193398003,-0.7071067812,
-0.6946583705,-0.6819983601,-0.6691306064,-0.6560590290,
-0.6427876097,-0.6293203910,-0.6156614753,-0.6018150232,
-0.5877852523,-0.5735764364,-0.5591929035,-0.5446390350,
-0.5299192642,-0.5150380749,-0.5000000000,-0.4848096202,
-0.4694715628,-0.4539904997,-0.4383711468,-0.4226182617,
-0.4067366431,-0.3907311285,-0.3746065934,-0.3583679495,
-0.3420201433,-0.3255681545,-0.3090169944,-0.2923717047,
-0.2756373558,-0.2588190451,-0.2419218956,-0.2249510543,
-0.2079116908,-0.1908089954,-0.1736481777,-0.1564344650,
-0.1391731010,-0.1218693434,-0.1045284633,-0.0871557427,
-0.0697564737,-0.0523359562,-0.0348994967,-0.0174524064,
 //cos
 1.0000000000, 0.9998476952, 0.9993908270, 0.9986295348,
 0.9975640503, 0.9961946981, 0.9945218954, 0.9925461516,
 0.9902680687, 0.9876883406, 0.9848077530, 0.9816271834,
 0.9781476007, 0.9743700648, 0.9702957263, 0.9659258263,
 0.9612616959, 0.9563047560, 0.9510565163, 0.9455185756,
 0.9396926208, 0.9335804265, 0.9271838546, 0.9205048535,
 0.9135454576, 0.9063077870, 0.8987940463, 0.8910065242,
 0.8829475929, 0.8746197071, 0.8660254038, 0.8571673007,
 0.8480480962, 0.8386705679, 0.8290375726, 0.8191520443,
 0.8090169944, 0.7986355100, 0.7880107536, 0.7771459615,
 0.7660444431, 0.7547095802, 0.7431448255, 0.7313537016,
 0.7193398003, 0.7071067812, 0.6946583705, 0.6819983601,
 0.6691306064, 0.6560590290, 0.6427876097, 0.6293203910,
 0.6156614753, 0.6018150232, 0.5877852523, 0.5735764364,
 0.5591929035, 0.5446390350, 0.5299192642, 0.5150380749,
 0.5000000000, 0.4848096202, 0.4694715628, 0.4539904997,
 0.4383711468, 0.4226182617, 0.4067366431, 0.3907311285,
 0.3746065934, 0.3583679495, 0.3420201433, 0.3255681545,
 0.3090169944, 0.2923717047, 0.2756373558, 0.2588190451,
 0.2419218956, 0.2249510543, 0.2079116908, 0.1908089954,
 0.1736481777, 0.1564344650, 0.1391731010, 0.1218693434,
 0.1045284633, 0.0871557427, 0.0697564737, 0.0523359562,
 0.0348994967, 0.0174524064, 0.0000000000,-0.0174524064,
-0.0348994967,-0.0523359562,-0.0697564737,-0.0871557427,
-0.1045284633,-0.1218693434,-0.1391731010,-0.1564344650,
-0.1736481777,-0.1908089954,-0.2079116908,-0.2249510543,
-0.2419218956,-0.2588190451,-0.2756373558,-0.2923717047,
-0.3090169944,-0.3255681545,-0.3420201433,-0.3583679495,
-0.3746065934,-0.3907311285,-0.4067366431,-0.4226182617,
-0.4383711468,-0.4539904997,-0.4694715628,-0.4848096202,
-0.5000000000,-0.5150380749,-0.5299192642,-0.5446390350,
-0.5591929035,-0.5735764364,-0.5877852523,-0.6018150232,
-0.6156614753,-0.6293203910,-0.6427876097,-0.6560590290,
-0.6691306064,-0.6819983601,-0.6946583705,-0.7071067812,
-0.7193398003,-0.7313537016,-0.7431448255,-0.7547095802,
-0.7660444431,-0.7771459615,-0.7880107536,-0.7986355100,
-0.8090169944,-0.8191520443,-0.8290375726,-0.8386705679,
-0.8480480962,-0.8571673007,-0.8660254038,-0.8746197071,
-0.8829475929,-0.8910065242,-0.8987940463,-0.9063077870,
-0.9135454576,-0.9205048535,-0.9271838546,-0.9335804265,
-0.9396926208,-0.9455185756,-0.9510565163,-0.9563047560,
-0.9612616959,-0.9659258263,-0.9702957263,-0.9743700648,
-0.9781476007,-0.9816271834,-0.9848077530,-0.9876883406,
-0.9902680687,-0.9925461516,-0.9945218954,-0.9961946981,
-0.9975640503,-0.9986295348,-0.9993908270,-0.9998476952,
-1.0000000000,-0.9998476952,-0.9993908270,-0.9986295348,
-0.9975640503,-0.9961946981,-0.9945218954,-0.9925461516,
-0.9902680687,-0.9876883406,-0.9848077530,-0.9816271834,
-0.9781476007,-0.9743700648,-0.9702957263,-0.9659258263,
-0.9612616959,-0.9563047560,-0.9510565163,-0.9455185756,
-0.9396926208,-0.9335804265,-0.9271838546,-0.9205048535,
-0.9135454576,-0.9063077870,-0.8987940463,-0.8910065242,
-0.8829475929,-0.8746197071,-0.8660254038,-0.8571673007,
-0.8480480962,-0.8386705679,-0.8290375726,-0.8191520443,
-0.8090169944,-0.7986355100,-0.7880107536,-0.7771459615,
-0.7660444431,-0.7547095802,-0.7431448255,-0.7313537016,
-0.7193398003,-0.7071067812,-0.6946583705,-0.6819983601,
-0.6691306064,-0.6560590290,-0.6427876097,-0.6293203910,
-0.6156614753,-0.6018150232,-0.5877852523,-0.5735764364,
-0.5591929035,-0.5446390350,-0.5299192642,-0.5150380749,
-0.5000000000,-0.4848096202,-0.4694715628,-0.4539904997,
-0.4383711468,-0.4226182617,-0.4067366431,-0.3907311285,
-0.3746065934,-0.3583679495,-0.3420201433,-0.3255681545,
-0.3090169944,-0.2923717047,-0.2756373558,-0.2588190451,
-0.2419218956,-0.2249510543,-0.2079116908,-0.1908089954,
-0.1736481777,-0.1564344650,-0.1391731010,-0.1218693434,
-0.1045284633,-0.0871557427,-0.0697564737,-0.0523359562,
-0.0348994967,-0.0174524064,-0.0000000000, 0.0174524064,
 0.0348994967, 0.0523359562, 0.0697564737, 0.0871557427,
 0.1045284633, 0.1218693434, 0.1391731010, 0.1564344650,
 0.1736481777, 0.1908089954, 0.2079116908, 0.2249510543,
 0.2419218956, 0.2588190451, 0.2756373558, 0.2923717047,
 0.3090169944, 0.3255681545, 0.3420201433, 0.3583679495,
 0.3746065934, 0.3907311285, 0.4067366431, 0.4226182617,
 0.4383711468, 0.4539904997, 0.4694715628, 0.4848096202,
 0.5000000000, 0.5150380749, 0.5299192642, 0.5446390350,
 0.5591929035, 0.5735764364, 0.5877852523, 0.6018150232,
 0.6156614753, 0.6293203910, 0.6427876097, 0.6560590290,
 0.6691306064, 0.6819983601, 0.6946583705, 0.7071067812,
 0.7193398003, 0.7313537016, 0.7431448255, 0.7547095802,
 0.7660444431, 0.7771459615, 0.7880107536, 0.7986355100,
 0.8090169944, 0.8191520443, 0.8290375726, 0.8386705679,
 0.8480480962, 0.8571673007, 0.8660254038, 0.8746197071,
 0.8829475929, 0.8910065242, 0.8987940463, 0.9063077870,
 0.9135454576, 0.9205048535, 0.9271838546, 0.9335804265,
 0.9396926208, 0.9455185756, 0.9510565163, 0.9563047560,
 0.9612616959, 0.9659258263, 0.9702957263, 0.9743700648,
 0.9781476007, 0.9816271834, 0.9848077530, 0.9876883406,
 0.9902680687, 0.9925461516, 0.9945218954, 0.9961946981,
 0.9975640503, 0.9986295348, 0.9993908270, 0.9998476952
  };

double radian(int x){
	double radians;
	double const pi = 3.14159265358979323846;
	radians=(pi/180)*x;

return radians;
}

int main(int argc, char *argv[])
{
    if (argc < 2)
    {
        std::cout << "Program wasn't called properly.\n To run it path to the target image must be passed as an argument.\n Example: ./output /home/user/g3-2021/data/Lenna.png" << std::endl;
        return 0;
    }

    std::ifstream infile;
    std::ofstream outfile;
    FILE * brams  ;
    FILE * ip ;
    FILE * bramres ;
    double sinc = 0 ;
    double cosc = 0;
    int angle = 0;
    int x,y;
    int cc = 0;
    int cx = 0;
    int sc = 0;
    int new_height = 0;
    int new_width = 0;
    int old_height = 0;
    int old_width = 0;
    int cy = 0;
    int midx = 0;
    int midy = 0;
    int start = 0;
    int lri = 0;
    int r = 0;
    int g = 0;
    int b = 0;
    int cnt = 0;
    
    int choice;

    do
    {
        std::cout << "Main Menu\n";
        std::cout << "Please make your selection\n";
        std::cout << "1 - Load data to an array\n";
        std::cout << "2 - Write img to brams\n";
	std::cout << "3 - Read dimensions from file\n";
	std::cout << "4 - Calculate all of the needed parameters\n";
	std::cout << "5 - Start IP\n";
        std::cout << "6 - Read bram results\n";
        std::cout << "7 - Write image to file\n ";
        std::cout << "8 - Exit\n";
        std::cout << "Selection: ";
        std::cin >> choice;

        switch (choice)
	  {
	  case 1:
	    infile.open("input.txt");
	    while (infile >> r >> g >> b)
	      {
		std::cout << r << " "<< g <<" "<< b << std::endl;
		
		bram_r_unrotated[cnt] = r;
	        bram_g_unrotated[cnt] = g;
	        bram_b_unrotated[cnt] = b;
		cnt++ ;
	      }
	    infile.close();
            break;
	  case 2:
	   
	    for (int i = 0; i < BRAM_SIZE_UNROTATED; ++i)
	      {
		brams = fopen("/dev/bram_r_unrotated", "w");
		fprintf(brams  , "(%d,%d)\n", i, bram_r_unrotated[i]);
		fclose(brams);
		brams = fopen("/dev/bram_g_unrotated", "w");
		fprintf(brams  , "(%d,%d)\n", i, bram_g_unrotated[i]);
		fclose(brams);
		brams= fopen("/dev/bram_b_unrotated", "w");
		fprintf(brams  , "(%d,%d)\n", i, bram_b_unrotated[i]);
		fclose(brams);
		std::cout <<bram_r_unrotated[i] << " " << bram_g_unrotated[i] << " " << bram_b_unrotated[i]  << std::endl;
		
	      }
          
	  break;
        case 3:
	  infile.open("dimenzije.txt");
	  while (infile >> old_height >> old_width )
	    {
	      std::cout << old_height << " "<< old_width << std::endl;
		
       
	    }
	  infile.close();
          
	  break;
        case 4:
	  std::cout << "4.1 - Write the direction for rotatio 0 - left 1 - right\n";
	  std::cin >>lri;
	  std::cout << "2 - Write angle of rotation\n";
	  std::cin >> angle;
	  if(angle < 90) {

	    sinc = sin(radian(angle));
	    
	    cosc = sin(radian(90-angle));
	    
	    new_height =(int)( abs(old_height * cosc) + abs(old_width * sinc));
	    new_width =(int)(abs( old_height * sinc) + abs(old_width * cosc));
	    
	  }
	  else{
	    x = old_width;
	    y = old_height;
	    float rotangle = angle - 90;
	    sinc = sin(radian(rotangle));
	    cosc = sin(radian(90-rotangle));
	    
	    new_height =(int)(abs( x * cosc) + abs(y * sinc));
	    new_width =(int)(abs( x * sinc) + abs(y * cosc));
	    
	    
	    }
	    std::cout << new_height<<" ";
	    std::cout << new_width <<std::endl;

	    sc = int(sincoslut[angle]*1024);
	    cc = int(sincoslut[angle + 360]*1024);
	    midx = new_height/2;
	    midy = new_width/2;
	    cx = old_height/2;
	    cy = old_width/2;

	    std::cout << sc << " "<< cc << std::endl;
	  
	  break;
        
	  
	case 5:
	  ip = fopen("/dev/rot_ip", "w");
	  fprintf (ip,  "%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", 1 , lri , cx ,cy ,midx ,midy , cc , sc , new_height , new_width , old_height , old_width);
	  fclose(ip);
	  break;
	case 6:

	  for (int i = 0; i < BRAM_SIZE_ROTATED; ++i)
		{
		 
		  bramres = fopen("/dev/bram_r_rotated", "r");
		  fscanf(bramres, "%d", &r);
		  bram_r_rotated[i] = r;
		  fclose(bramres);
		}
	     for (int j = 0; j < BRAM_SIZE_ROTATED; ++j)
		{
		 
		  bramres = fopen("/dev/bram_g_rotated", "r");
		  fscanf(bramres, "%d", &g);
		  bram_g_rotated[j] = g;
		  fclose(bramres);
		}
	      for (int k = 0; k < BRAM_SIZE_ROTATED; ++k)
		{
		 
		  bramres = fopen("/dev/bram_b_rotated", "r");
		  fscanf(bramres, "%d", &b);
		  bram_b_rotated[k] = b;
		  fclose(bramres);
		}
	    
	    
	  break;
	  
	  case 7:
	    outfile.open("output.txt");
	    if (!outfile.is_open())
	      {
		std::cout << "Output file couldnt open!" << std::endl;
		return 0;
	      }
	    for (int l = 0; l < BRAM_SIZE_ROTATED; l++)
	      {
        
		outfile <<bram_r_unrotated[l] << " " << bram_g_unrotated[l] << " " << bram_b_unrotated[l]  << std::endl;
        
        
	      }
	    
	    outfile.close();
	    break;
	    
	case 8:
	  std::cout << "Goodbye!" << std::endl;
	  return 0;
	  break;
	      default:
		
		std::cout << "Main Menu\n";
		std::cout << "Please make your selection\n";
		std::cout << "1 - Load data to an array\n";
		std::cout << "2 - Write img to brams\n";
		std::cout << "3 - Read dimensions from file\n";
		std::cout << "4 - Calculate all of the needed parameters\n";
		std::cout << "5 - Start IP\n";
		std::cout << "6 - Read bram results\n";
		std::cout << "7 - Write image to file\n ";
		std::cout << "8 - Exit\n";
		std::cout << "Selection: ";
		std::cin >> choice;
        }
    } while (choice != 8);
    
    return 0;
}
