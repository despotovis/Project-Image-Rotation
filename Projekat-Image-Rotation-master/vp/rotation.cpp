#include "rotation.hpp"
#include "memory.hpp"

#include <systemc>
#include <iostream>
#include <tlm>
#include <tlm_utils/simple_target_socket.h>
#include <sstream>

using namespace std;
using namespace sc_core;
using namespace sc_dt;
using namespace tlm;

rotation::rotation(sc_module_name name):sc_module(name),
				rot_ic_tsoc("ic_to_hard"),
				rot_ic_isoc("rot_to_ic"),
				rot_mem_isoc("rot_to_mem")
{
  rot_ic_tsoc.register_b_transport(this, &rotation::b_transport);
  SC_REPORT_INFO("ROTATION", "Platform is constructed");
}

ImageMatrix2D rotation::GetRotatedImage(Point2i NewBoundary, Point2i OldBoundary, ImageMatrix2D OldImage, sc_angle angle, string direction)
{
  ImageMatrix1D PixelArray;
  pixel ZeroPixel;

  const sin_result_sc lut[MAX_SIZE_LOOKUP] =
    {
     //sin
     0.0000000000, 0.0174524064, 0.0348994967, 0.0523359562,
     0.0697564737, 0.0871557427, 0.1045284633, 0.1218693434,
     0.1391731010, 0.1564344650, 0.1736481777, 0.1908089954,
     0.2079116908, 0.2249510543, 0.2419218956, 0.2588190451,
     0.2756373558, 0.2923717047, 0.3090169944, 0.3255681545,
     0.3420201433, 0.3583679495, 0.3746065934, 0.3907311285,
     0.4067366431, 0.4226182617, 0.4383711468, 0.4539904997,
     0.4694715628, 0.4848096202, 0.5000000000, 0.5150380749,
     0.5299192642, 0.5446390350, 0.5591929035, 0.5735764364,
     0.5877852523, 0.6018150232, 0.6156614753, 0.6293203910,
     0.6427876097, 0.6560590290, 0.6691306064, 0.6819983601,
     0.6946583705, 0.7071067812, 0.7193398003, 0.7313537016,
     0.7431448255, 0.7547095802, 0.7660444431, 0.7771459615,
     0.7880107536, 0.7986355100, 0.8090169944, 0.8191520443,
     0.8290375726, 0.8386705679, 0.8480480962, 0.8571673007,
     0.8660254038, 0.8746197071, 0.8829475929, 0.8910065242,
     0.8987940463, 0.9063077870, 0.9135454576, 0.9205048535,
     0.9271838546, 0.9335804265, 0.9396926208, 0.9455185756,
     0.9510565163, 0.9563047560, 0.9612616959, 0.9659258263,
     0.9702957263, 0.9743700648, 0.9781476007, 0.9816271834,
     0.9848077530, 0.9876883406, 0.9902680687, 0.9925461516,
     0.9945218954, 0.9961946981, 0.9975640503, 0.9986295348,
     0.9993908270, 0.9998476952, 1.0000000000, 0.9998476952,
     0.9993908270, 0.9986295348, 0.9975640503, 0.9961946981,
     0.9945218954, 0.9925461516, 0.9902680687, 0.9876883406,
     0.9848077530, 0.9816271834, 0.9781476007, 0.9743700648,
     0.9702957263, 0.9659258263, 0.9612616959, 0.9563047560,
     0.9510565163, 0.9455185756, 0.9396926208, 0.9335804265,
     0.9271838546, 0.9205048535, 0.9135454576, 0.9063077870,
     0.8987940463, 0.8910065242, 0.8829475929, 0.8746197071,
     0.8660254038, 0.8571673007, 0.8480480962, 0.8386705679,
     0.8290375726, 0.8191520443, 0.8090169944, 0.7986355100,
     0.7880107536, 0.7771459615, 0.7660444431, 0.7547095802,
     0.7431448255, 0.7313537016, 0.7193398003, 0.7071067812,
     0.6946583705, 0.6819983601, 0.6691306064, 0.6560590290,
     0.6427876097, 0.6293203910, 0.6156614753, 0.6018150232,
     0.5877852523, 0.5735764364, 0.5591929035, 0.5446390350,
     0.5299192642, 0.5150380749, 0.5000000000, 0.4848096202,
     0.4694715628, 0.4539904997, 0.4383711468, 0.4226182617,
     0.4067366431, 0.3907311285, 0.3746065934, 0.3583679495,
     0.3420201433, 0.3255681545, 0.3090169944, 0.2923717047,
     0.2756373558, 0.2588190451, 0.2419218956, 0.2249510543,
     0.2079116908, 0.1908089954, 0.1736481777, 0.1564344650,
     0.1391731010, 0.1218693434, 0.1045284633, 0.0871557427,
     0.0697564737, 0.0523359562, 0.0348994967, 0.0174524064,
     0.0000000000,-0.0174524064,-0.0348994967,-0.0523359562,
     -0.0697564737,-0.0871557427,-0.1045284633,-0.1218693434,
     -0.1391731010,-0.1564344650,-0.1736481777,-0.1908089954,
     -0.2079116908,-0.2249510543,-0.2419218956,-0.2588190451,
     -0.2756373558,-0.2923717047,-0.3090169944,-0.3255681545,
     -0.3420201433,-0.3583679495,-0.3746065934,-0.3907311285,
     -0.4067366431,-0.4226182617,-0.4383711468,-0.4539904997,
     -0.4694715628,-0.4848096202,-0.5000000000,-0.5150380749,
     -0.5299192642,-0.5446390350,-0.5591929035,-0.5735764364,
     -0.5877852523,-0.6018150232,-0.6156614753,-0.6293203910,
     -0.6427876097,-0.6560590290,-0.6691306064,-0.6819983601,
     -0.6946583705,-0.7071067812,-0.7193398003,-0.7313537016,
     -0.7431448255,-0.7547095802,-0.7660444431,-0.7771459615,
     -0.7880107536,-0.7986355100,-0.8090169944,-0.8191520443,
     -0.8290375726,-0.8386705679,-0.8480480962,-0.8571673007,
     -0.8660254038,-0.8746197071,-0.8829475929,-0.8910065242,
     -0.8987940463,-0.9063077870,-0.9135454576,-0.9205048535,
     -0.9271838546,-0.9335804265,-0.9396926208,-0.9455185756,
     -0.9510565163,-0.9563047560,-0.9612616959,-0.9659258263,
     -0.9702957263,-0.9743700648,-0.9781476007,-0.9816271834,
     -0.9848077530,-0.9876883406,-0.9902680687,-0.9925461516,
     -0.9945218954,-0.9961946981,-0.9975640503,-0.9986295348,
     -0.9993908270,-0.9998476952,-1.0000000000,-0.9998476952,
     -0.9993908270,-0.9986295348,-0.9975640503,-0.9961946981,
     -0.9945218954,-0.9925461516,-0.9902680687,-0.9876883406,
     -0.9848077530,-0.9816271834,-0.9781476007,-0.9743700648,
     -0.9702957263,-0.9659258263,-0.9612616959,-0.9563047560,
     -0.9510565163,-0.9455185756,-0.9396926208,-0.9335804265,
     -0.9271838546,-0.9205048535,-0.9135454576,-0.9063077870,
     -0.8987940463,-0.8910065242,-0.8829475929,-0.8746197071,
     -0.8660254038,-0.8571673007,-0.8480480962,-0.8386705679,
     -0.8290375726,-0.8191520443,-0.8090169944,-0.7986355100,
     -0.7880107536,-0.7771459615,-0.7660444431,-0.7547095802,
     -0.7431448255,-0.7313537016,-0.7193398003,-0.7071067812,
     -0.6946583705,-0.6819983601,-0.6691306064,-0.6560590290,
     -0.6427876097,-0.6293203910,-0.6156614753,-0.6018150232,
     -0.5877852523,-0.5735764364,-0.5591929035,-0.5446390350,
     -0.5299192642,-0.5150380749,-0.5000000000,-0.4848096202,
     -0.4694715628,-0.4539904997,-0.4383711468,-0.4226182617,
     -0.4067366431,-0.3907311285,-0.3746065934,-0.3583679495,
     -0.3420201433,-0.3255681545,-0.3090169944,-0.2923717047,
     -0.2756373558,-0.2588190451,-0.2419218956,-0.2249510543,
     -0.2079116908,-0.1908089954,-0.1736481777,-0.1564344650,
     -0.1391731010,-0.1218693434,-0.1045284633,-0.0871557427,
     -0.0697564737,-0.0523359562,-0.0348994967,-0.0174524064,
     //cos
     1.0000000000, 0.9998476952, 0.9993908270, 0.9986295348,
     0.9975640503, 0.9961946981, 0.9945218954, 0.9925461516,
     0.9902680687, 0.9876883406, 0.9848077530, 0.9816271834,
     0.9781476007, 0.9743700648, 0.9702957263, 0.9659258263,
     0.9612616959, 0.9563047560, 0.9510565163, 0.9455185756,
     0.9396926208, 0.9335804265, 0.9271838546, 0.9205048535,
     0.9135454576, 0.9063077870, 0.8987940463, 0.8910065242,
     0.8829475929, 0.8746197071, 0.8660254038, 0.8571673007,
     0.8480480962, 0.8386705679, 0.8290375726, 0.8191520443,
     0.8090169944, 0.7986355100, 0.7880107536, 0.7771459615,
     0.7660444431, 0.7547095802, 0.7431448255, 0.7313537016,
     0.7193398003, 0.7071067812, 0.6946583705, 0.6819983601,
     0.6691306064, 0.6560590290, 0.6427876097, 0.6293203910,
     0.6156614753, 0.6018150232, 0.5877852523, 0.5735764364,
     0.5591929035, 0.5446390350, 0.5299192642, 0.5150380749,
     0.5000000000, 0.4848096202, 0.4694715628, 0.4539904997,
     0.4383711468, 0.4226182617, 0.4067366431, 0.3907311285,
     0.3746065934, 0.3583679495, 0.3420201433, 0.3255681545,
     0.3090169944, 0.2923717047, 0.2756373558, 0.2588190451,
     0.2419218956, 0.2249510543, 0.2079116908, 0.1908089954,
     0.1736481777, 0.1564344650, 0.1391731010, 0.1218693434,
     0.1045284633, 0.0871557427, 0.0697564737, 0.0523359562,
     0.0348994967, 0.0174524064, 0.0000000000,-0.0174524064,
     -0.0348994967,-0.0523359562,-0.0697564737,-0.0871557427,
     -0.1045284633,-0.1218693434,-0.1391731010,-0.1564344650,
     -0.1736481777,-0.1908089954,-0.2079116908,-0.2249510543,
     -0.2419218956,-0.2588190451,-0.2756373558,-0.2923717047,
     -0.3090169944,-0.3255681545,-0.3420201433,-0.3583679495,
     -0.3746065934,-0.3907311285,-0.4067366431,-0.4226182617,
     -0.4383711468,-0.4539904997,-0.4694715628,-0.4848096202,
     -0.5000000000,-0.5150380749,-0.5299192642,-0.5446390350,
     -0.5591929035,-0.5735764364,-0.5877852523,-0.6018150232,
     -0.6156614753,-0.6293203910,-0.6427876097,-0.6560590290,
     -0.6691306064,-0.6819983601,-0.6946583705,-0.7071067812,
     -0.7193398003,-0.7313537016,-0.7431448255,-0.7547095802,
     -0.7660444431,-0.7771459615,-0.7880107536,-0.7986355100,
     -0.8090169944,-0.8191520443,-0.8290375726,-0.8386705679,
     -0.8480480962,-0.8571673007,-0.8660254038,-0.8746197071,
     -0.8829475929,-0.8910065242,-0.8987940463,-0.9063077870,
     -0.9135454576,-0.9205048535,-0.9271838546,-0.9335804265,
     -0.9396926208,-0.9455185756,-0.9510565163,-0.9563047560,
     -0.9612616959,-0.9659258263,-0.9702957263,-0.9743700648,
     -0.9781476007,-0.9816271834,-0.9848077530,-0.9876883406,
     -0.9902680687,-0.9925461516,-0.9945218954,-0.9961946981,
     -0.9975640503,-0.9986295348,-0.9993908270,-0.9998476952,
     -1.0000000000,-0.9998476952,-0.9993908270,-0.9986295348,
     -0.9975640503,-0.9961946981,-0.9945218954,-0.9925461516,
     -0.9902680687,-0.9876883406,-0.9848077530,-0.9816271834,
     -0.9781476007,-0.9743700648,-0.9702957263,-0.9659258263,
     -0.9612616959,-0.9563047560,-0.9510565163,-0.9455185756,
     -0.9396926208,-0.9335804265,-0.9271838546,-0.9205048535,
     -0.9135454576,-0.9063077870,-0.8987940463,-0.8910065242,
     -0.8829475929,-0.8746197071,-0.8660254038,-0.8571673007,
     -0.8480480962,-0.8386705679,-0.8290375726,-0.8191520443,
     -0.8090169944,-0.7986355100,-0.7880107536,-0.7771459615,
     -0.7660444431,-0.7547095802,-0.7431448255,-0.7313537016,
     -0.7193398003,-0.7071067812,-0.6946583705,-0.6819983601,
     -0.6691306064,-0.6560590290,-0.6427876097,-0.6293203910,
     -0.6156614753,-0.6018150232,-0.5877852523,-0.5735764364,
     -0.5591929035,-0.5446390350,-0.5299192642,-0.5150380749,
     -0.5000000000,-0.4848096202,-0.4694715628,-0.4539904997,
     -0.4383711468,-0.4226182617,-0.4067366431,-0.3907311285,
     -0.3746065934,-0.3583679495,-0.3420201433,-0.3255681545,
     -0.3090169944,-0.2923717047,-0.2756373558,-0.2588190451,
     -0.2419218956,-0.2249510543,-0.2079116908,-0.1908089954,
     -0.1736481777,-0.1564344650,-0.1391731010,-0.1218693434,
     -0.1045284633,-0.0871557427,-0.0697564737,-0.0523359562,
     -0.0348994967,-0.0174524064,-0.0000000000, 0.0174524064,
     0.0348994967, 0.0523359562, 0.0697564737, 0.0871557427,
     0.1045284633, 0.1218693434, 0.1391731010, 0.1564344650,
     0.1736481777, 0.1908089954, 0.2079116908, 0.2249510543,
     0.2419218956, 0.2588190451, 0.2756373558, 0.2923717047,
     0.3090169944, 0.3255681545, 0.3420201433, 0.3583679495,
     0.3746065934, 0.3907311285, 0.4067366431, 0.4226182617,
     0.4383711468, 0.4539904997, 0.4694715628, 0.4848096202,
     0.5000000000, 0.5150380749, 0.5299192642, 0.5446390350,
     0.5591929035, 0.5735764364, 0.5877852523, 0.6018150232,
     0.6156614753, 0.6293203910, 0.6427876097, 0.6560590290,
     0.6691306064, 0.6819983601, 0.6946583705, 0.7071067812,
     0.7193398003, 0.7313537016, 0.7431448255, 0.7547095802,
     0.7660444431, 0.7771459615, 0.7880107536, 0.7986355100,
     0.8090169944, 0.8191520443, 0.8290375726, 0.8386705679,
     0.8480480962, 0.8571673007, 0.8660254038, 0.8746197071,
     0.8829475929, 0.8910065242, 0.8987940463, 0.9063077870,
     0.9135454576, 0.9205048535, 0.9271838546, 0.9335804265,
     0.9396926208, 0.9455185756, 0.9510565163, 0.9563047560,
     0.9612616959, 0.9659258263, 0.9702957263, 0.9743700648,
     0.9781476007, 0.9816271834, 0.9848077530, 0.9876883406,
     0.9902680687, 0.9925461516, 0.9945218954, 0.9961946981,
     0.9975640503, 0.9986295348, 0.9993908270, 0.9998476952
  };
  
  int x, y;
  int OldHeight = OldBoundary.x;
  int OldWidth = OldBoundary.y;

  sin_result_sc  sinc;
  sinc = lut[angle];
  sin_result_sc  cosc;
  cosc = lut[360+angle];
 
  int cy = OldWidth / 2;
  int cx = OldHeight / 2;
  string smer = direction;
  int NewHeight = NewBoundary.x;
  int NewWidth  = NewBoundary.y;
  
  int midx = NewHeight / 2 ;
  int midy = NewWidth / 2 ;
  RotatedImage.resize(NewHeight, vector<pixel> (NewWidth));
  
  for (int row = 0; row < NewHeight ; row++)
    {
    for (int col= 0; col < NewWidth ; col++)
      {
	if (smer == "right")
	  {
	    x  = (int)((row - midx) * cosc - (col - midy) * sinc + cx);
	    y  = (int)((col - midy) * cosc + (row - midx) * sinc + cy);
	  }
	if (smer == "left")
	  {
	    x  = (int)((row - midx) * cosc + (col - midy) * sinc + cx);
	    y  = (int)((col - midy) * cosc - (row - midx) * sinc + cy);
	  }
	if (x >= 0 && x < OldHeight && y >= 0 && y < OldWidth)
	  RotatedImage[row][col] = (OldImage[x][y]); 
      }
    } 
  
  return RotatedImage;
}

void rotation::b_transport(pl_t& pl, sc_time& offset)
{
  tlm_command cmd = pl.get_command();
  uint64 addr = pl.get_address();
  unsigned char *data = pl.get_data_ptr();

  switch(cmd)
    {
    case TLM_WRITE_COMMAND:
      {
	switch(addr)
	  {
	  case ROTATION_READY: 
	    ready = *((unsigned char*)data);
	    pl.set_response_status(TLM_OK_RESPONSE);
	    rotation_s();
	    SC_REPORT_INFO("ROTATION", "Ready");
	    break;
	  default:
	    pl.set_response_status(TLM_ADDRESS_ERROR_RESPONSE);
	    SC_REPORT_ERROR("ROTATION", "Invalid address");
	    break;
	  }
      }
      break;
    default:
      pl.set_response_status(TLM_COMMAND_ERROR_RESPONSE);
      SC_REPORT_ERROR("ROTATION", "Invalid command");
      break;
    }
  
  offset += sc_time(5, SC_NS);
}

void rotation::rotation_s()
{
  SC_REPORT_INFO("ROTATION", "Row loaded from memory");       //Boundary.x loaded from memory
  pl.set_command(TLM_READ_COMMAND);
  pl.set_address(MEMORY_BOUNDARY_ROW);
  pl.set_data_ptr((unsigned char*)&rows);
  pl.set_response_status(TLM_INCOMPLETE_RESPONSE);
  rot_mem_isoc -> b_transport(pl, offset);

  rows = *((int*)pl.get_data_ptr());
  Boundary.x = rows;
  cout << "rows: " << Boundary.x << endl;
  
  qk.set_and_sync(offset);
  offset += sc_time(5, SC_NS);

  SC_REPORT_INFO("ROTATION", "Col loaded from memory");       //Boundary.y loaded from memory
  pl.set_command(TLM_READ_COMMAND);
  pl.set_address(MEMORY_BOUNDARY_COL);
  pl.set_data_ptr((unsigned char*)&cols);
  pl.set_response_status(TLM_INCOMPLETE_RESPONSE);
  rot_mem_isoc -> b_transport(pl, offset);

  cols = *((int*)pl.get_data_ptr());
  Boundary.y = cols;
  cout << "cols: " << Boundary.y << endl;
  
  qk.set_and_sync(offset);
  offset += sc_time(5, SC_NS);

  SC_REPORT_INFO("ROTATION", "Image loaded from memory");     //Image loaded from memory
  pl.set_command(TLM_READ_COMMAND);
  pl.set_address(MEMORY_IMAGE);
  pl.set_data_ptr((unsigned char*)&Image2D);
  pl.set_response_status(TLM_INCOMPLETE_RESPONSE);
  rot_mem_isoc -> b_transport(pl, offset);

  Image2D = *((ImageMatrix2D*)pl.get_data_ptr());             //Loading image

  qk.set_and_sync(offset);
  offset += sc_time(5, SC_NS);

  SC_REPORT_INFO("ROTATION", "Angle loaded from memory");     //Angle loaded from memory
  pl.set_command(TLM_READ_COMMAND);
  pl.set_address(MEMORY_ANGLE);
  pl.set_data_ptr((unsigned char*)&Angle);
  pl.set_response_status(TLM_INCOMPLETE_RESPONSE);
  rot_mem_isoc -> b_transport(pl, offset);

  Angle = *((int*)pl.get_data_ptr());
  cout << "Angle: " << Angle << endl;
  
  qk.set_and_sync(offset);
  offset += sc_time(5, SC_NS);

  SC_REPORT_INFO("ROTATION", "Direction loaded from memory"); //Direction loaded from memory
  pl.set_command(TLM_READ_COMMAND);
  pl.set_address(MEMORY_DIRECTION);
  pl.set_data_ptr((unsigned char*)&direction);
  pl.set_response_status(TLM_INCOMPLETE_RESPONSE);
  rot_mem_isoc -> b_transport(pl, offset);

  direction = *((string*)pl.get_data_ptr());
  cout << "Direction: " << direction << endl;
  
  qk.set_and_sync(offset);
  offset += sc_time(5, SC_NS);

  SC_REPORT_INFO("ROTATION", "NRow loaded from memory");      //NewBoundary.x loaded from memory
  pl.set_command(TLM_READ_COMMAND);
  pl.set_address(MEMORY_BOUNDARY_NROW);
  pl.set_data_ptr((unsigned char*)&nrows);
  pl.set_response_status(TLM_INCOMPLETE_RESPONSE);
  rot_mem_isoc -> b_transport(pl, offset);

  nrows = *((int*)pl.get_data_ptr());
  NewBoundary.x = nrows;
  cout << "nrows: " << NewBoundary.x << endl;
  
  qk.set_and_sync(offset);
  offset += sc_time(5, SC_NS);

  SC_REPORT_INFO("ROTATION", "NCol loaded from memory");      //NewBoundary.x loaded from memory
  pl.set_command(TLM_READ_COMMAND);
  pl.set_address(MEMORY_BOUNDARY_NCOL);
  pl.set_data_ptr((unsigned char*)&ncols);
  pl.set_response_status(TLM_INCOMPLETE_RESPONSE);
  rot_mem_isoc -> b_transport(pl, offset);

  ncols = *((int*)pl.get_data_ptr());
  NewBoundary.y = ncols;
  cout << "ncols: " << NewBoundary.y << endl;
  
  qk.set_and_sync(offset);
  offset += sc_time(5, SC_NS);

  GetRotatedImage(NewBoundary, Boundary, Image2D, Angle, direction);

  SC_REPORT_INFO("ROTATION", "Rotated image sent to memory");    //Rotated image sent to memory
  pl.set_command(TLM_WRITE_COMMAND);
  pl.set_address(MEMORY_ROTATED_IMAGE);
  pl.set_data_ptr((unsigned char*)& RotatedImage);
  pl.set_response_status(TLM_INCOMPLETE_RESPONSE);
  rot_mem_isoc -> b_transport(pl, offset);
  
  qk.set_and_sync(offset);
  offset += sc_time(5, SC_NS);

  SC_REPORT_INFO("ROTATION", "Done sent to CPU");    //Done sent to CPU
  pl.set_command(TLM_WRITE_COMMAND);
  pl.set_address(VP_ADDRESS_CPU);
  pl.set_data_ptr((unsigned char*)& done);
  pl.set_response_status(TLM_INCOMPLETE_RESPONSE);
  rot_ic_isoc -> b_transport(pl, offset);
  
  qk.set_and_sync(offset);
  offset += sc_time(5, SC_NS);
}

