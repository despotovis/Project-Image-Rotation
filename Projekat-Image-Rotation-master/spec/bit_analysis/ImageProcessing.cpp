#include "ImageProcessing.hpp"

using namespace cv;
using namespace std;

ImageMatrix2D SCGetRotatedImage (point_rotated NewBoundry,point_unrotated OldBoundry,ImageMatrix2D OldImage,sc_angle angle,char * direction){
  ImageMatrix2D RotatedImage;
  ImageMatrix1D PixelArray;
  
  const sin_result_sc lut[MAX_SIZE_LOOKUP] = {//sin
 0.0000000000, 0.0174524064, 0.0348994967, 0.0523359562,
 0.0697564737, 0.0871557427, 0.1045284633, 0.1218693434,
 0.1391731010, 0.1564344650, 0.1736481777, 0.1908089954,
 0.2079116908, 0.2249510543, 0.2419218956, 0.2588190451,
 0.2756373558, 0.2923717047, 0.3090169944, 0.3255681545,
 0.3420201433, 0.3583679495, 0.3746065934, 0.3907311285,
 0.4067366431, 0.4226182617, 0.4383711468, 0.4539904997,
 0.4694715628, 0.4848096202, 0.5000000000, 0.5150380749,
 0.5299192642, 0.5446390350, 0.5591929035, 0.5735764364,
 0.5877852523, 0.6018150232, 0.6156614753, 0.6293203910,
 0.6427876097, 0.6560590290, 0.6691306064, 0.6819983601,
 0.6946583705, 0.7071067812, 0.7193398003, 0.7313537016,
 0.7431448255, 0.7547095802, 0.7660444431, 0.7771459615,
 0.7880107536, 0.7986355100, 0.8090169944, 0.8191520443,
 0.8290375726, 0.8386705679, 0.8480480962, 0.8571673007,
 0.8660254038, 0.8746197071, 0.8829475929, 0.8910065242,
 0.8987940463, 0.9063077870, 0.9135454576, 0.9205048535,
 0.9271838546, 0.9335804265, 0.9396926208, 0.9455185756,
 0.9510565163, 0.9563047560, 0.9612616959, 0.9659258263,
 0.9702957263, 0.9743700648, 0.9781476007, 0.9816271834,
 0.9848077530, 0.9876883406, 0.9902680687, 0.9925461516,
 0.9945218954, 0.9961946981, 0.9975640503, 0.9986295348,
 0.9993908270, 0.9998476952, 1.0000000000, 0.9998476952,
 0.9993908270, 0.9986295348, 0.9975640503, 0.9961946981,
 0.9945218954, 0.9925461516, 0.9902680687, 0.9876883406,
 0.9848077530, 0.9816271834, 0.9781476007, 0.9743700648,
 0.9702957263, 0.9659258263, 0.9612616959, 0.9563047560,
 0.9510565163, 0.9455185756, 0.9396926208, 0.9335804265,
 0.9271838546, 0.9205048535, 0.9135454576, 0.9063077870,
 0.8987940463, 0.8910065242, 0.8829475929, 0.8746197071,
 0.8660254038, 0.8571673007, 0.8480480962, 0.8386705679,
 0.8290375726, 0.8191520443, 0.8090169944, 0.7986355100,
 0.7880107536, 0.7771459615, 0.7660444431, 0.7547095802,
 0.7431448255, 0.7313537016, 0.7193398003, 0.7071067812,
 0.6946583705, 0.6819983601, 0.6691306064, 0.6560590290,
 0.6427876097, 0.6293203910, 0.6156614753, 0.6018150232,
 0.5877852523, 0.5735764364, 0.5591929035, 0.5446390350,
 0.5299192642, 0.5150380749, 0.5000000000, 0.4848096202,
 0.4694715628, 0.4539904997, 0.4383711468, 0.4226182617,
 0.4067366431, 0.3907311285, 0.3746065934, 0.3583679495,
 0.3420201433, 0.3255681545, 0.3090169944, 0.2923717047,
 0.2756373558, 0.2588190451, 0.2419218956, 0.2249510543,
 0.2079116908, 0.1908089954, 0.1736481777, 0.1564344650,
 0.1391731010, 0.1218693434, 0.1045284633, 0.0871557427,
 0.0697564737, 0.0523359562, 0.0348994967, 0.0174524064,
 0.0000000000,-0.0174524064,-0.0348994967,-0.0523359562,
-0.0697564737,-0.0871557427,-0.1045284633,-0.1218693434,
-0.1391731010,-0.1564344650,-0.1736481777,-0.1908089954,
-0.2079116908,-0.2249510543,-0.2419218956,-0.2588190451,
-0.2756373558,-0.2923717047,-0.3090169944,-0.3255681545,
-0.3420201433,-0.3583679495,-0.3746065934,-0.3907311285,
-0.4067366431,-0.4226182617,-0.4383711468,-0.4539904997,
-0.4694715628,-0.4848096202,-0.5000000000,-0.5150380749,
-0.5299192642,-0.5446390350,-0.5591929035,-0.5735764364,
-0.5877852523,-0.6018150232,-0.6156614753,-0.6293203910,
-0.6427876097,-0.6560590290,-0.6691306064,-0.6819983601,
-0.6946583705,-0.7071067812,-0.7193398003,-0.7313537016,
-0.7431448255,-0.7547095802,-0.7660444431,-0.7771459615,
-0.7880107536,-0.7986355100,-0.8090169944,-0.8191520443,
-0.8290375726,-0.8386705679,-0.8480480962,-0.8571673007,
-0.8660254038,-0.8746197071,-0.8829475929,-0.8910065242,
-0.8987940463,-0.9063077870,-0.9135454576,-0.9205048535,
-0.9271838546,-0.9335804265,-0.9396926208,-0.9455185756,
-0.9510565163,-0.9563047560,-0.9612616959,-0.9659258263,
-0.9702957263,-0.9743700648,-0.9781476007,-0.9816271834,
-0.9848077530,-0.9876883406,-0.9902680687,-0.9925461516,
-0.9945218954,-0.9961946981,-0.9975640503,-0.9986295348,
-0.9993908270,-0.9998476952,-1.0000000000,-0.9998476952,
-0.9993908270,-0.9986295348,-0.9975640503,-0.9961946981,
-0.9945218954,-0.9925461516,-0.9902680687,-0.9876883406,
-0.9848077530,-0.9816271834,-0.9781476007,-0.9743700648,
-0.9702957263,-0.9659258263,-0.9612616959,-0.9563047560,
-0.9510565163,-0.9455185756,-0.9396926208,-0.9335804265,
-0.9271838546,-0.9205048535,-0.9135454576,-0.9063077870,
-0.8987940463,-0.8910065242,-0.8829475929,-0.8746197071,
-0.8660254038,-0.8571673007,-0.8480480962,-0.8386705679,
-0.8290375726,-0.8191520443,-0.8090169944,-0.7986355100,
-0.7880107536,-0.7771459615,-0.7660444431,-0.7547095802,
-0.7431448255,-0.7313537016,-0.7193398003,-0.7071067812,
-0.6946583705,-0.6819983601,-0.6691306064,-0.6560590290,
-0.6427876097,-0.6293203910,-0.6156614753,-0.6018150232,
-0.5877852523,-0.5735764364,-0.5591929035,-0.5446390350,
-0.5299192642,-0.5150380749,-0.5000000000,-0.4848096202,
-0.4694715628,-0.4539904997,-0.4383711468,-0.4226182617,
-0.4067366431,-0.3907311285,-0.3746065934,-0.3583679495,
-0.3420201433,-0.3255681545,-0.3090169944,-0.2923717047,
-0.2756373558,-0.2588190451,-0.2419218956,-0.2249510543,
-0.2079116908,-0.1908089954,-0.1736481777,-0.1564344650,
-0.1391731010,-0.1218693434,-0.1045284633,-0.0871557427,
-0.0697564737,-0.0523359562,-0.0348994967,-0.0174524064,
 //cos
 1.0000000000, 0.9998476952, 0.9993908270, 0.9986295348,
 0.9975640503, 0.9961946981, 0.9945218954, 0.9925461516,
 0.9902680687, 0.9876883406, 0.9848077530, 0.9816271834,
 0.9781476007, 0.9743700648, 0.9702957263, 0.9659258263,
 0.9612616959, 0.9563047560, 0.9510565163, 0.9455185756,
 0.9396926208, 0.9335804265, 0.9271838546, 0.9205048535,
 0.9135454576, 0.9063077870, 0.8987940463, 0.8910065242,
 0.8829475929, 0.8746197071, 0.8660254038, 0.8571673007,
 0.8480480962, 0.8386705679, 0.8290375726, 0.8191520443,
 0.8090169944, 0.7986355100, 0.7880107536, 0.7771459615,
 0.7660444431, 0.7547095802, 0.7431448255, 0.7313537016,
 0.7193398003, 0.7071067812, 0.6946583705, 0.6819983601,
 0.6691306064, 0.6560590290, 0.6427876097, 0.6293203910,
 0.6156614753, 0.6018150232, 0.5877852523, 0.5735764364,
 0.5591929035, 0.5446390350, 0.5299192642, 0.5150380749,
 0.5000000000, 0.4848096202, 0.4694715628, 0.4539904997,
 0.4383711468, 0.4226182617, 0.4067366431, 0.3907311285,
 0.3746065934, 0.3583679495, 0.3420201433, 0.3255681545,
 0.3090169944, 0.2923717047, 0.2756373558, 0.2588190451,
 0.2419218956, 0.2249510543, 0.2079116908, 0.1908089954,
 0.1736481777, 0.1564344650, 0.1391731010, 0.1218693434,
 0.1045284633, 0.0871557427, 0.0697564737, 0.0523359562,
 0.0348994967, 0.0174524064, 0.0000000000,-0.0174524064,
-0.0348994967,-0.0523359562,-0.0697564737,-0.0871557427,
-0.1045284633,-0.1218693434,-0.1391731010,-0.1564344650,
-0.1736481777,-0.1908089954,-0.2079116908,-0.2249510543,
-0.2419218956,-0.2588190451,-0.2756373558,-0.2923717047,
-0.3090169944,-0.3255681545,-0.3420201433,-0.3583679495,
-0.3746065934,-0.3907311285,-0.4067366431,-0.4226182617,
-0.4383711468,-0.4539904997,-0.4694715628,-0.4848096202,
-0.5000000000,-0.5150380749,-0.5299192642,-0.5446390350,
-0.5591929035,-0.5735764364,-0.5877852523,-0.6018150232,
-0.6156614753,-0.6293203910,-0.6427876097,-0.6560590290,
-0.6691306064,-0.6819983601,-0.6946583705,-0.7071067812,
-0.7193398003,-0.7313537016,-0.7431448255,-0.7547095802,
-0.7660444431,-0.7771459615,-0.7880107536,-0.7986355100,
-0.8090169944,-0.8191520443,-0.8290375726,-0.8386705679,
-0.8480480962,-0.8571673007,-0.8660254038,-0.8746197071,
-0.8829475929,-0.8910065242,-0.8987940463,-0.9063077870,
-0.9135454576,-0.9205048535,-0.9271838546,-0.9335804265,
-0.9396926208,-0.9455185756,-0.9510565163,-0.9563047560,
-0.9612616959,-0.9659258263,-0.9702957263,-0.9743700648,
-0.9781476007,-0.9816271834,-0.9848077530,-0.9876883406,
-0.9902680687,-0.9925461516,-0.9945218954,-0.9961946981,
-0.9975640503,-0.9986295348,-0.9993908270,-0.9998476952,
-1.0000000000,-0.9998476952,-0.9993908270,-0.9986295348,
-0.9975640503,-0.9961946981,-0.9945218954,-0.9925461516,
-0.9902680687,-0.9876883406,-0.9848077530,-0.9816271834,
-0.9781476007,-0.9743700648,-0.9702957263,-0.9659258263,
-0.9612616959,-0.9563047560,-0.9510565163,-0.9455185756,
-0.9396926208,-0.9335804265,-0.9271838546,-0.9205048535,
-0.9135454576,-0.9063077870,-0.8987940463,-0.8910065242,
-0.8829475929,-0.8746197071,-0.8660254038,-0.8571673007,
-0.8480480962,-0.8386705679,-0.8290375726,-0.8191520443,
-0.8090169944,-0.7986355100,-0.7880107536,-0.7771459615,
-0.7660444431,-0.7547095802,-0.7431448255,-0.7313537016,
-0.7193398003,-0.7071067812,-0.6946583705,-0.6819983601,
-0.6691306064,-0.6560590290,-0.6427876097,-0.6293203910,
-0.6156614753,-0.6018150232,-0.5877852523,-0.5735764364,
-0.5591929035,-0.5446390350,-0.5299192642,-0.5150380749,
-0.5000000000,-0.4848096202,-0.4694715628,-0.4539904997,
-0.4383711468,-0.4226182617,-0.4067366431,-0.3907311285,
-0.3746065934,-0.3583679495,-0.3420201433,-0.3255681545,
-0.3090169944,-0.2923717047,-0.2756373558,-0.2588190451,
-0.2419218956,-0.2249510543,-0.2079116908,-0.1908089954,
-0.1736481777,-0.1564344650,-0.1391731010,-0.1218693434,
-0.1045284633,-0.0871557427,-0.0697564737,-0.0523359562,
-0.0348994967,-0.0174524064,-0.0000000000, 0.0174524064,
 0.0348994967, 0.0523359562, 0.0697564737, 0.0871557427,
 0.1045284633, 0.1218693434, 0.1391731010, 0.1564344650,
 0.1736481777, 0.1908089954, 0.2079116908, 0.2249510543,
 0.2419218956, 0.2588190451, 0.2756373558, 0.2923717047,
 0.3090169944, 0.3255681545, 0.3420201433, 0.3583679495,
 0.3746065934, 0.3907311285, 0.4067366431, 0.4226182617,
 0.4383711468, 0.4539904997, 0.4694715628, 0.4848096202,
 0.5000000000, 0.5150380749, 0.5299192642, 0.5446390350,
 0.5591929035, 0.5735764364, 0.5877852523, 0.6018150232,
 0.6156614753, 0.6293203910, 0.6427876097, 0.6560590290,
 0.6691306064, 0.6819983601, 0.6946583705, 0.7071067812,
 0.7193398003, 0.7313537016, 0.7431448255, 0.7547095802,
 0.7660444431, 0.7771459615, 0.7880107536, 0.7986355100,
 0.8090169944, 0.8191520443, 0.8290375726, 0.8386705679,
 0.8480480962, 0.8571673007, 0.8660254038, 0.8746197071,
 0.8829475929, 0.8910065242, 0.8987940463, 0.9063077870,
 0.9135454576, 0.9205048535, 0.9271838546, 0.9335804265,
 0.9396926208, 0.9455185756, 0.9510565163, 0.9563047560,
 0.9612616959, 0.9659258263, 0.9702957263, 0.9743700648,
 0.9781476007, 0.9816271834, 0.9848077530, 0.9876883406,
 0.9902680687, 0.9925461516, 0.9945218954, 0.9961946981,
 0.9975640503, 0.9986295348, 0.9993908270, 0.9998476952
  };

  rotated_size x,y;
  unrotated_size OldHeight = OldBoundry.x;
  unrotated_size OldWidth = OldBoundry.y;
  cout << "Stara granica: " << OldHeight << "."<<OldWidth <<endl;
  //sin_result_sc lookup_table[1024];
  //LookupGenerateBitAnalysis(lookup_table,1024);
  
  
  sin_result_sc  sinc;
  sinc = lut[angle];
  sin_result_sc  cosc;
  cosc = lut[360+angle];
  cout << "SINUS:" << sinc <<endl;
  cout << "COsinus: " << cosc <<endl;
  
  unrotated_padding cy = (OldWidth)/ 2;
  unrotated_padding  cx = (OldHeight)/ 2;
  string smer = direction;
  rotated_size NewHeight = NewBoundry.x;
  rotated_size NewWidth  = NewBoundry.y;
  cout << "Nova granica: " << NewHeight << "."<<NewWidth <<endl;
  rotated_padding  midx = NewHeight/2 ;
  rotated_padding  midy = NewWidth/2 ;
  RotatedImage.resize(NewHeight,vector<pixel>(NewWidth));
  
  for (rotated_size row = 0; row < NewHeight ; row++){

    for (rotated_size col= 0; col < NewWidth ; col++){
   
      if (smer == "right"){
      x  = ((row-midx ) * cosc - (col-midy) * sinc +cx);
      y  = ((col-midy ) * cosc + (row-midx) * sinc +cy);
      
      
      }

      if (smer == "left"){

       x  = ((row-midx ) * cosc + (col-midy) * sinc +cx);
       y  = ((col-midy ) * cosc - (row-midx) * sinc +cy);

       
      }
      if (x >= 0 && x< OldHeight && y >= 0 && y< OldWidth)
	{
	  RotatedImage[row][col]=(OldImage[x][y]);
	  
	}
      
      
    }
    
    
  }
  
  cout << "Finished" << endl;
  
  return RotatedImage;
  
  

  
}
Point2i FindNewBorder(Point2i CurrentBoundry,double angle){

  Point2i NewBoundry;
  double  sinc = 0;
  double  cosc = 0;
  double  rad  = 0;
  if(angle < 90) {
    rad=radian(angle);
    sinc = sin(rad);
    cosc = sin(radian(90)-rad);
   
    NewBoundry.x =(int)(abs( CurrentBoundry.x * cosc) + abs(CurrentBoundry.y * sinc));
    NewBoundry.y =(int)(abs( CurrentBoundry.x * sinc) + abs(CurrentBoundry.y * cosc));
  }
  else{
    int x = CurrentBoundry.y;
    int y = CurrentBoundry.x;
    rad =radian( angle - 90);
    sinc = sin(rad);
    cosc = sin(radian(90)-rad);
    cout << "Sinus: " << sinc << "Cosinus:" << cosc <<endl;
    
    NewBoundry.x =(int)((abs(x * cosc) + abs(y * sinc)));
    NewBoundry.y =(int)((abs(x * sinc) + abs(y * cosc)));
    

  }
  cout << NewBoundry.x<<" ";
  cout << NewBoundry.y <<endl;
  
  
  return NewBoundry;
}

double factorial(int x) 
{
	double result_fact=1;

	for (;x>=1;x--){
		result_fact*=x;
	}	
return result_fact;
}

double radian(double x){
	double radians =0;
	double pi = 3.14159265358979323846;
	radians=pi*(x/180.0);

return radians;
}

double sin_custom(double x,int br_clanova){

	double tejlor = 0;
	double a,b,c;

	for(int y=0; y!=br_clanova; y++){
		a=power(-1,y);	
		b=factorial((2*y)+1);
		c=power(x,(2*y)+1);
		tejlor=tejlor+(a*c/b);
}
return tejlor;
}

double power(double base, int exponent)
{
double result=1;
for (exponent; exponent>0; exponent--)
{
result = result * base;
}
return result;
}

void LookupGenerateBitAnalysis(double * lookup,int n){
  
  for (int i = 0 ; i <= 359 ; i ++) {

    lookup[i] = sin (i*PI/180);
    

  }
  for (int i = 0 ; i <= 359 ; i ++) {

    lookup[360+i] = cos (i*PI/180);
  }


  cout << lookup[0]  << "."<< lookup[90] << "." << lookup[180] << "." << lookup[360] << "."<<  lookup[450] <<endl;
}



bool SCGetRotatedImage_FormatChecker(Point2i NewBoundry,Point2i OldBoundry,ImageMatrix2D OldImage,int angle,char* direction,lookup_vector lookup_tabela,int w,int l){
  ImageMatrix2D RotatedImage;
  ImageMatrix1D PixelArray;
  pixel ZeroPixel;
  int x,y;
  int x_check,y_check;
  int tolerance = 0;
  int OldHeight = OldBoundry.x;
  int OldWidth = OldBoundry.y;
 
  //double temp_array [MAX_SIZE_LOOKUP];
  //LookupGenerateBitAnalysis(temp_array,MAX_SIZE_LOOKUP);
 
  sin_result_sc1 sin_result(w,l);
  sin_result = sin(radian(angle));
  sin_result_sc1 cos_result(w,l);
  cos_result = cos(radian(angle));
  cout << "Sin lookup: "<<sin_result  << "Cos lookup: "<<cos_result <<endl;
  double sinc = sin(angle*PI/180);
  double cosc = cos(angle*PI/180);
  cout << "Sin : "<<sinc  << "Cos : "<<cosc <<endl;
  int cy = OldWidth / 2;
  int cx = OldHeight / 2;
  string smer = direction;
  int NewHeight = NewBoundry.x;
  int NewWidth  = NewBoundry.y;
  
  int midx = NewHeight/2 ;
  int midy = NewWidth/2 ;
  RotatedImage.resize(NewHeight,vector<pixel>(NewWidth));
  
  for(int row = 0; row < NewHeight ; row++){

    for(int col = 0; col < NewWidth ; col++){
   
      if (smer == "right"){
      x  = (int)((row-midx ) * cosc - (col-midy) * sinc +cx);
      y  = (int)((col-midy ) * cosc + (row-midx) * sinc +cy);

       x_check  = (int)((row-midx ) * cos_result - (col-midy) * sin_result +cx);
       y_check  = (int)((col-midy ) * cos_result + (row-midx) * sin_result +cy);
      if(x!=x_check || y!=y_check){
	 tolerance++;
	 if (tolerance > 100){
	   return false;}
	
	}
      
      }

      if (smer == "left"){

       x  = (int)((row-midx ) * cosc + (col-midy) * sinc +cx);
       y  = (int)((col-midy ) * cosc - (row-midx) * sinc +cy);

       x_check  = (int)((row-midx ) * cos_result + (col-midy) * sin_result +cx);
       y_check  = (int)((col-midy ) * cos_result - (row-midx) * sin_result +cy);
       
       if(x!=x_check || y!=y_check){
	 tolerance++;
	 if (tolerance > 100){
	   return false;}
	 }

       
      }
      if (x >= 0 && x< OldHeight && y >= 0 && y< OldWidth)
	{
	  RotatedImage[row][col]=(OldImage[x_check][y_check]);
	  
	}
      
      
    }
    
    
  }
  
  cout << "Finished" << endl;
  
  return true;
  
  

  
}
